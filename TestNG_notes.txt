>>>>>
Methods annotated with @Test that happen to return a value will be ignored,
unless you set allow-return-values to true in your testng.xml

A test is considered successful if it completed without throwing any exception or if  it threw an exception that was
expected (see the documentation for the expectedExceptions attribute found on the @Test annotation).
<<<<<

>>>>>
For @Before(@After) methods from the superclass to be executed
before(after) methods from the subclass, method naming must be different
in superclass and subclass. If method naming is the same, only methods
from subclass are executed
<<<<<

>>>>>
Test Groups

TestNG allows you to perform sophisticated groupings of test methods.
Not only can you declare that methods belong to groups, but you can also specify groups
that contain other groups. Then TestNG can be invoked and asked to include a certain set of groups
(or regular expressions) while excluding another set. This gives you maximum flexibility
in how you partition your tests and doesn't require you to recompile anything

TestNG uses regular expressions, and not wildmats. Be aware of the difference
(for example, "anything" is matched by ".*" -- dot star -- and not "*").

You can define groups at the class level and then add groups at the method level
<<<<<

>>>>>
It does make sense to define the @BeforeTest/@AfterTest methods in a separate config class for each <test> tag containing
more than one class. It makes things manageable as @BeforeTest and @AfterTest logic is common among all test methods of all
classes/packages defined under that <test> tag. Otherwise whenever you might need to change the logic of @BeforeTest,
@AfterTest, you need to look in all classes to find one which contain these methods. For @BeforeSuite/@AfterSuite, you can
place them anywhere. Usually, the config class of one of the <test> tag is an ideal candidate for these methods.
<<<<<

>>>>>
Parameters

Test methods don't have to be parameterless.  You can use an arbitrary number of parameters
on each of your test method, and you instruct TestNG to pass you the correct parameters with
the @Parameters annotation.
Test method can receive defalut value specified inside the @Optional annottation
(@Optional(some default value)) if no parameter is found in the testing.xml 
There are two ways to set these parameters:  with testng.xml or programmatically.

test.xml:
<parameter name="first-name"  value="Cedric"/>

The @Parameters annotation can be placed at the following locations:
 - On any method that already has a @Test, @Before/After or @Factory annotation.
 - On at most one constructor of your test class.  In this case, TestNG will invoke this
   particular constructor with the parameters initialized to the values specified in testng.xml
   whenever it needs to instantiate your test class.  This feature can be used to initialize fields inside
   your classes to values that will then be used by your test methods.
   Notes:
     The XML parameters are mapped to the Java parameters in the same order as they are found in the annotation,
	 and TestNG will issue an error if the numbers don't match.
     Parameters are scoped. In testng.xml, you can declare them either under a <suite> tag or under <test>. If two parameters
	 have the same name, it's the one defined in <test> that has precedence. This is convenient if you need to specify
	 a parameter applicable to all your tests and override its value only for certain tests. 

Programatically - DataProviders:
Specifying parameters in testng.xml might not be sufficient if you need to pass complex parameters, or parameters that need
to be created from Java (complex objects, objects read from a property file or a database, etc...). In this case, you can
use a Data Provider to supply the values you need to test.  A Data Provider is a method on your class that returns
an array of array of objects.  This method is annotated with @DataProvider.

For DataProvider in "name" attribute is not provided, it will be equal to the method name

By default, the data provider will be looked for in the current test class or one of its base classes.
If you want to put your data provider in a different class, it needs to be a static method or a class with a non-arg
constructor, and you specify the class where it can be found in the dataProviderClass attribute

The Data Provider method can return one of the following two types:
 - An array of array of objects (Object[][])
 - An Iterator<Object[]> , an Iterator lets you create your test data lazily.
 
The data provider supports injection too. ITestContext or Method can be injected.
<<<<<

>>>>>
Factories

Factories allow you to create tests dynamically. Your testng.xml only needs to reference the class that contains
the factory method, since the test instances themselves will be created at runtime. Or, if building
a test suite instance programatically, you can add the factory in the same manner as for tests.

The factory method can receive parameters just like @Test and @Before/After and it must return Object[]. The objects returned
can be of any class (not necessarily the same class as the factory class) and they don't even need to contain TestNG
annotations (in which case they will be ignored by TestNG).

Factories can also be used with data providers, and you can leverage this functionality by putting the @Factory annotation
either on a regular method or on a constructor.
" The example will make TestNG create two test classes, on with the constructor invoked with the value 41 and the other with 42." 

Factorie createst two instances of he same class. Tests from both instances are executed.
<<<<<

>>>>>
Class level annotations

The @Test annotation can be put on a class instead of a test method. The effect of a class level @Test annotation is
to make all the public methods of this class to become test methods even if they are not annotated. You can still repeat
the @Test annotation on a method if you want to add certain attributes. 
<<<<<

>>>>>
Ignoring tests

TestNG lets you ignore all the @Test methods :
 - In a class (or)
 - In a particular package (or)
 - In a package and all of its child packages
using the new annotation @Ignore. 
<<<<<


>>>>>
Parallelism

The parallel attribute on the <suite> tag can take one of following values: 
 - parallel="methods": TestNG will run all your test methods in separate threads. Dependent methods will also run in separate
   threads but they will respect the order that you specified. 
 - parallel="tests": TestNG will run all the methods in the same <test> tag in the same thread, but each <test> tag will be
   in a separate thread. This allows you to group all your classes that are not thread safe in the same <test> and guarantee
   they will all run in the same thread while taking advantage of TestNG using as many threads as possible to run your tests. 
 - parallel="classes": TestNG will run all the methods in the same class in the same thread, but each class will be run in
   a separate thread. 
 - parallel="instances": TestNG will run all the methods in the same instance in the same thread, but two methods on two
   different instances will be running in different threads. 

You can also specify that a @Test method should be invoked from different threads. You can use the attribute threadPoolSize
to achieve this result.

@BeforeMethod and @AfterMethod annotated methods are executed before/after every test execution, like they are executed in
parallel too. But @Beforemethod of the subclass doesn't have to follow right after the @BeforeMethod of the superclass.
The same is valid for @AfterMethod methods
<<<<<

>>>>>
Dependencies

There are two kinds of dependencies:
 - Hard dependencies. All the methods you depend on must have run and succeeded for you to run. If at least one failure
   occurred in your dependencies, you will not be invoked and marked as a SKIP in the report.
 - Soft dependencies. You will always be run after the methods you depend on, even if some of them have failed. This is
   useful when you just want to make sure that your test methods are run in a certain order but their success doesn't
   really depend on the success of others. A soft dependency is obtained by adding "alwaysRun=true" in your @Test annotation. 

Both dependsOnGroups and dependsOnMethods accept regular expressions as parameters.  For dependsOnMethods, if you are
depending on a method which happens to have several overloaded versions, all the overloaded methods will be invoked.
If you only want to invoke one of the overloaded methods, you should use dependsOnGroups.

Method dependencie (dependsOnMethods = ...)
Dependent method must be @Test annotated method and must be enabled. Also 'dependsOnMethods' in any @Before or @After
annotated method doesn't work. It looks like 'dependsOnMethod is reserved for @Test annotated methods. Same thing can be
accomplished by using 'dependsOnGroups' On using groups, we are no longer exposed to refactoring problems as when using
'dependsOnMethods'. Similar problem exists for dependsOnGroups

Groups dependencie (dependsOnGroups = ...)
Order of Tests execution in group is not guaranteed. In this case test executions are ordered by name. Don't count on it in
the future.
When configuration failures occur testNG's default behavior is to then skip every after listener down the line. For instance
if your exception occurred in beforeClass or beforeMethod then afterMethod and afterClass will be skipped. You can solve
the issue of subsequent after listeners not being executed by adding the attribute alwaysRun=true to the annotation of the
listeners. This could be useful if you are collecting reporting information during your execution and your rely on these
listeners to set some data for your reporting.
Remember to create flags to verify if any additional cleanup should be performed in the event that the before listeners DID
fail. For instance if the driver was never created calling driver quit could throw another exception in your afterMethod
execution.
Should you add alwaysRun to your before listeners? If you are adding group names to your methods you probably should but
that is entirely up to you. When adding alwaysRun to before listeners it tells the listener that it is ok to run even if it
doesn't contain the group name for the test specified in your testng.xml suite.
If you wish to have a different set of before listeners which perform different behaviors based on the group name then you
shouldn't use alwaysRun.
There is on attribute "onlyForGroups" for @BeforMethod and @AfterMethod but it doesn't work for me. Maybe new TestNG version
might help.

Alternatively, you can specify your group dependencies in the testng.xml file. You use the <dependencies> tag to achieve this
	<test name = "TestNG Train 6">
	<groups>
		<dependencies>
			<group depends-on="test1" name="test3"/>
		</dependencies>
	</groups>
		<classes>
		.
		.
		.
		
In order to one @Test method have dependsOnGroups , there must be second @Test method that belongs to group that first method
depends on. If there are only @Befoe or @After method that belong to the group, TestNG will throw exception for the first 
@Test method with explanation there is no methods in dependant group. Similar as for dependsOnMethods 
<<<<<

>>>>>
Listeners

There are several "TestNG Listeners" that allow you to modify TestNG's behavior:
 * IAnnotationTransformer
 * IAnnotationTransformer2
 * IAnnotationTransformer3
 * IHookable
 * IInvokedMethodListener
 * IMethodInterceptor
 * IReporter
 * ISuiteListener
 * ITestListener

TestNG allows you to modify the content of all the annotations at runtime. IAnnotationTransformer is applied only for @Test
annotation. If you need to modify another TestNG annotation (@Factory,@DataProvider ...) use IAnnotationTransformer2 or even
IAnnotationTransformer3.
Only one of the three parameters testClass, testConstructor and testMethod will be non-null.
When the method transform() is invoked, you can call any of the setters on the ITest test parameter to alter its value before
TestNG proceeds further. 

Once TestNG has calculated in what order the test methods will be invoked, these methods are split in two groups:
 * Methods run sequentially. These are all the test methods that have dependencies or dependents. These methods will be run
   in a specific order.
 * Methods run in no particular order. These are all the methods that don't belong in the first category. The order in which
   these test methods are run is random and can vary from one run to the next (although by default, TestNG will try to group
   test methods by class). 
In order to give you more control on the methods that belong to the second category, TestNG defines IMethodInterceptor interface.
The list of methods passed in parameters are all the methods that can be run in any order. Your intercept method is expected
to return a similar list of IMethodInstance:
 * The same list you received in parameter but in a different order.
 * A smaller list of IMethodInstance objects.
 * A bigger list of IMethodInstance objects. 
!!!!! Well this is not quite true.
I did get all the methods, the ones that depends on the other methods or other groups, and the ones that don't have any
dependencies. Dependant and non-dependant methods were first grouped by class, and than for each class non-dependant comes
first. After method reordering, the order of non-dependent methods didn't change,
the order of dependent methods did change. During execution, non-dependent methods were executed first, but the dependent
methods were not executed as they were reordered.

The listener IInvokedMethodListener allows you to be notified whenever TestNG is about to invoke a test or configuration 
method. 

The @Listeners annotation can contain any class that extends org.testng.ITestNGListener except IAnnotationTransformer and
IAnnotationTransformer2. The reason is that these listeners need to be known very early in the process so that TestNG can
use them to rewrite your annotations, therefore you need to specify these listeners in your testng.xml file.
Note that the @Listeners annotation will apply to your entire suite file, just as if you had specified it in a testng.xml file.
If you want to restrict its scope (for example, only running on the current class), the code in your listener could first
check the test method that's about to run and decide what to do then. 

@Retention(RetentionPolicy.RUNTIME)
@Target ({ElementType.TYPE})
public @interface DisableListener {}

public class MyListener implements someITestNGListener {

public void beforeInvocation(IInvokedMethod iInvokedMethod, ITestResult iTestResult) {
  ConstructorOrMethod consOrMethod =iInvokedMethod.getTestMethod().getConstructorOrMethod();
  DisableListener disable = consOrMethod.getMethod().getDeclaringClass().getAnnotation(DisableListener.class);
  if (disable != null) {
    return;
  }
  // else resume your normal operations
}

@DisableListener
@Listeners({ com.example.MyListener.class, com.example.MyMethodInterceptor.class })
public class MyTest {
  // ...
}

<<<<<

>>>>>
Sometimes you may find some odd behavior in your testNG execution. In order to better understand some of the decisions testNG
is making you can increase the log level of testNG itself.
In your testNG.xml you can add verbose="10" attribute to the <suite> tag in order to have testNG print the most detailed
information available to your console output during execution. The attribute accepts levels between 1 and 10 so you will
receiver varying levels of details as you increase the value

<suite name="Suite" parallel="tests" thread-count="10" verbose="10">
You will now find during execution that your console output will contain information regarding the "planned" tests,
methods, and listeners testNG is going to run. Throughout the execution you will also receive additional logic details
from testNG as it executions your tests.
<<<<<

>>>>>
Dependency Injection

TestNG lets you declare additional parameters in your methods. TestNG will automatically fill these parameters with
the right value
 * Annotattion  | ITestContext | XmlTest | Method | Object[] | ITestResult
 * BeforeSuite  |    Y             N         N         N            N
 * BeforeTest   |    Y             Y         N         N            N
 * BeforeGroups |    Y             Y         N         N            N
 * BeforeClass  |    Y             Y         N         N            N
 * BeforMethod  |    Y             Y         Y         Y            Y
 * Test         |    Y             N        ???        N            N
 * DatProvider  |    Y             N         Y         N            N
 * AfterMethod  |    Y             Y         Y         Y            Y
 * AfterClass   |    Y             Y         N         N            N
 * AfterGroups  |    Y             Y         N         N            N
 * AfterTest    |    Y             Y         N         N            N
 * AfterSuite   |    Y             N         N         N            N
 
!!!!It looks like Test can have Method dependency too

 * ITestResult: reflects the result of the test method that was just run.
 * XmlTest: contains the current <test> tag.
 * Method: receives the test method that will be/was called.
 * Object[]: receives the list of parameters that are about to be fed to the upcoming test method,
   which could be injected by TestNG, such as java.lang.reflect.Method, or come from a DataProvider

You can turn off injection with the @NoInjection annotation.</br>
<<<<<

>>>>>
For skipped tests @beforeMethod and @AfterMethod are not executed, probably because test is skipped.
But really interesting thing is how are "dependsOnMethods" tests handled in parallel execution.
Sometimes these tests were executed before dependent test so instead of SKIP they get PASS ????
check TestNGTesting14
<<<<<

>>>>>

<<<<<

>>>>>

Hard vs Soft Assert

Hard Assert throws an AssertExceptionimmediately when an assert statement
fails and test suite continues with next @Test. Since It marks method as fail
if assert condition gets failed and the remaining statements inside the
method will be aborted.

Soft Assert collects errors during @Test is running. They don't throw an
exception when an assert fails. The execution will continue with the next
step after the assert statement. Using assertAll() at the end it will check
if any of the asserts during the test failed, and will fail your test with
proper summary.
>>>>>

For maven based project, the popular approach to run the tests is using maven-surefire-plugin which is used by-default
whenever test goal is executed [ with 'mvn test' / 'mvn install' e.g.]. You can configure this plugin in pom.xml to provide
some configuration information like the location of test artifacts [testng.xml] and other properties.

<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-surefire-plugin</artifactId>
    <version>2.18.1</version>
    <configuration>
        <suiteXmlFiles>
            <suiteXmlFile>src/test/resources/testng.xml</suiteXmlFile>
        </suiteXmlFiles>
     </configuration>
</plugin>
<<<<<
